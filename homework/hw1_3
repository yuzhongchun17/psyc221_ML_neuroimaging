import pandas as pd
import statsmodels.api as sm
import statsmodels.formula.api as smf
import seaborn as sns
import matplotlib.pyplot as plt

# Load your data from the CSV file
df = pd.read_csv('homework\data_assignment_1.csv')

# Brief data summary:
print(df.describe(include='all'))
# Check how many values are missing per column
missing_values_before = df.isnull().sum().sum()
print("missing value:", missing_values_before)


# Setting up the dependent variables (biomarker levels)

# Selecting problem
problem = 2 # part 1

dependent_vars = df[['Frontal_Sup', 'Frontal_Inf', 'Cingulum_Ant', 'Cingulum_Post', 'Parietal_Sup', 'Parietal_Inf', 'Occipital_Sup', 'Occipital_Inf', 'Temporal_Sup', 'Temporal_Inf']] # outcome
if problem == 1:
    independent_vars = df[['diagnosis', 'sex', 'age']] # preditor[x0,x1,x2]
else:
    # Create an interaction term for 'diagnosis' and 'sex'
    df['diagnosis_sex'] = df['diagnosis'] * df['sex']
    independent_vars = df[['diagnosis', 'sex', 'age','diagnosis_sex']] # preditor[x0,x1,x2,x3]

    # Set your significance level
    alpha = 0.05

    # Placeholder for results
    results_summary = []
    # For each brain region (assuming you have one column per region, e.g., 'region1', 'region2', ...)
    for region in dependent_vars:  # regions should be a list of your brain region column names
        # Fit the model
        model = smf.ols(formula=f'{region} ~ age + sex * diagnosis', data=df).fit()  # '*' creates the interaction term
        
        # Check if the interaction is significant
        p_value = model.pvalues['sex:diagnosis']  # get the p-value of the interaction term
        if p_value < alpha:
            results_summary.append(f'In {region}, disease effects significantly differ by sex (p={p_value:.3f}).')
        else:
            results_summary.append(f'In {region}, disease effects do not significantly differ by sex (p={p_value:.3f}).')

    # Print one-line summaries
    for summary in results_summary:
        print(summary)
    # import statsmodels.api as sm
    # from statsmodels.formula.api import ols
    # from statsmodels.stats.anova import anova_lm
    # from scipy.stats import f_oneway
    # import pandas as pd

    # # Bonferroni correction
    # alpha = 0.05
    # adjusted_alpha = alpha / 10  # Adjusting alpha for the number of tests (10 biomarkers)

    # results = []  # to store results

    # for biomarker in ['Frontal_Sup', 'Frontal_Inf', 'Cingulum_Ant', 'Cingulum_Post', 
    #                 'Parietal_Sup', 'Parietal_Inf', 'Occipital_Sup', 'Occipital_Inf', 
    #                 'Temporal_Sup', 'Temporal_Inf']:
    #     # For each biomarker, we're going to fit a linear model and then perform an ANCOVA
    #     # We include the interaction term we're interested in: diagnosis*sex
    #     formula = f"{biomarker} ~ C(diagnosis) * C(sex) + age"  # Including age as a covariate
    #     model = ols(formula, data=df).fit()
        
    #     # Perform ANOVA on the fitted linear model
    #     aov_table = anova_lm(model, typ=2)

    #     # Get the p-value for the interaction term
    #     p_interaction = aov_table.loc['C(diagnosis):C(sex)', 'PR(>F)']

    #     # Check if the p-value is significant after Bonferroni correction
    #     is_significant = 'Yes' if p_interaction < adjusted_alpha else 'No'

    #     results.append({
    #         'Biomarker': biomarker,
    #         'p-value': p_interaction,
    #         'Significant after Bonferroni?': is_significant
    #     })

    # # Convert results to a DataFrame
    # results_df = pd.DataFrame(results)
    # print(results_df)

# # Define the MANCOVA model
# manova = sm.MANOVA(dependent_vars, independent_vars)

# # Fit the model
# result = manova.mv_test()
# print(result)
# # Visualization
# fig, axes = plt.subplots(nrows=5, ncols=2, figsize=(15, 20))
# fig.suptitle('Differences in biomarker by diagnosis', y=1.02)

# # Flattening axes for easier iteration
# axes = axes.ravel()

# for i, dependent_var in enumerate(dependent_vars):
#     sns.boxplot(x='diagnosis', y=dependent_var, data=df, ax=axes[i])
#     axes[i].set_title('Differences in {} biomarker by diagnosis'.format(dependent_var))

# # Adjust layout
# plt.tight_layout()
# plt.show()
if problem == 1:
        
    # Melting the DataFrame to have all biomarkers in one column and their values in another.
    # This is useful for creating box plots for multiple biomarkers.
    df_melted = df.melt(id_vars='diagnosis', 
                        value_vars=['Frontal_Sup', 'Frontal_Inf', 'Cingulum_Ant', 'Cingulum_Post', 
                                    'Parietal_Sup', 'Parietal_Inf', 'Occipital_Sup', 'Occipital_Inf', 
                                    'Temporal_Sup', 'Temporal_Inf'], 
                        var_name='Biomarker', value_name='Value')

    # Create a boxplot
    plt.figure(figsize=(15, 10)) # You might need to adjust the size for your particular display
    sns.boxplot(x='Biomarker', y='Value', hue='diagnosis', data=df_melted)

    plt.xticks(rotation=45) # Rotate x labels for readability
    plt.title('Effect of Disease on Biomarkers')
    plt.show()
else:
    # Melting the DataFrame to long format.
    df_melted = df.melt(id_vars=['diagnosis', 'sex'], 
                        value_vars=['Frontal_Sup', 'Frontal_Inf', 'Cingulum_Ant', 'Cingulum_Post', 
                                    'Parietal_Sup', 'Parietal_Inf', 'Occipital_Sup', 'Occipital_Inf', 
                                    'Temporal_Sup', 'Temporal_Inf'], 
                        var_name='Biomarker', value_name='Value')
    # Create a figure to define the size of the plot
    plt.figure(figsize=(15, 10))

    # Explicitly create the 'group' column combining 'diagnosis' and 'sex' with a separator for clarity.
    df_melted['group'] = df_melted['diagnosis'].astype(str) + "-" + df_melted['sex'].astype(str)

    # Ensure that the 'group' column has four unique categories as expected.
    print(df_melted['group'].unique())  # should print four groups: ['male-control', 'female-control', 'male-disease', 'female-disease']

    sns.boxplot(
        x='Biomarker', 
        y='Value', 
        hue='group',  # different colors for combined groups
        data=df_melted, 
        palette='Set1',  # color palette
        order=['Frontal_Sup', 'Frontal_Inf', 'Cingulum_Ant', 'Cingulum_Post', 
            'Parietal_Sup', 'Parietal_Inf', 'Occipital_Sup', 'Occipital_Inf', 
            'Temporal_Sup', 'Temporal_Inf'],  # order of the x-axis categories
    )

    # Rotate x labels for readability and set a title
    plt.xticks(rotation=45)
    plt.title('Disease Effects on Biomarkers by Sex and Diagnosis')
    plt.legend(title='Group', loc='upper right')  # set the legend title and position

    plt.show()






    
    # # Melting the DataFrame to long format.
    # df_melted = df.melt(id_vars=['diagnosis', 'sex'], 
    #                     value_vars=['Frontal_Sup', 'Frontal_Inf', 'Cingulum_Ant', 'Cingulum_Post', 
    #                                 'Parietal_Sup', 'Parietal_Inf', 'Occipital_Sup', 'Occipital_Inf', 
    #                                 'Temporal_Sup', 'Temporal_Inf'], 
    #                     var_name='Biomarker', value_name='Value')

    # # Create a FacetGrid that separates data by diagnosis
    # g = sns.FacetGrid(df_melted, col="diagnosis", height=6, aspect=1)
    # # Map the boxplots onto the FacetGrid. hue will separate by 'sex'.
    # g.map_dataframe(sns.boxplot, x='Biomarker', y='Value', hue='sex', order=['Frontal_Sup', 'Frontal_Inf', 'Cingulum_Ant', 'Cingulum_Post', 
    #                                                                         'Parietal_Sup', 'Parietal_Inf', 'Occipital_Sup', 'Occipital_Inf', 
    #                                                                         'Temporal_Sup', 'Temporal_Inf'])
    # # Rotate x labels for readability
    # g.set_xticklabels(rotation=45)
    # # Add a legend
    # g.add_legend(title="Sex")
    # # Set the plot's main title
    # g.fig.suptitle('Disease Effects on Biomarkers by Diagnosis')

    # plt.show()





